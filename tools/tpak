#!/usr/bin/env fish

set -g PRJDIR (path dirname (path resolve (status dirname)))
set -q XDG_CACHE_HOME || set XDG_CACHE_HOME $HOME/.cache
set -g CACHEDIR $XDG_CACHE_HOME/themepack.fish
set -g TPAK_TEMP (mktemp -d -t tpak)

function gen_all_color_schemes
    # pre-reqs
    git_iterm2cs
    if not type yq &>/dev/null
        echo >&2 "tpak: Required tool not found 'yq'."
        return 1
    end

    set -l file
    for file in $CACHEDIR/iTerm2-Color-Schemes/alacritty/*.yml
        gen_color_scheme_from_yaml $file
    end
end

function gen_color_scheme_from_yaml -a ymlfile
    set -l datadir $PRJDIR/tools/color_schemes; mkdir -p $datadir
    set -l TPAK_TEMP (mktemp -d -t tpak)
    set -l theme_name (path basename (path change-extension '' $ymlfile))
    set -l theme_json_file $datadir/(to_snake_case $theme_name).json
    set -l bg (yq '.[] | .primary | .background' $ymlfile)
    set -l header \
        "name: '$theme_name'" \
        "type: '"(determine_theme_type $bg)"'"

    # compare iterm2cs props with the json file
    set -l iterm2cs_props \
        name type \
        background foreground \
        black blue cyan green magenta red white yellow \
        brblack brblue brcyan brgreen brmagenta brred brwhite bryellow \
        cursor_text cursor_color \
        selection_background selection_text
    set -l props
    if test -f $theme_json_file
        set props (yq 'to_entries | .[].key' $theme_json_file)
    else
        set props $iterm2cs_props
    end

    # preserve any extra properties that iterm2cs doesn't have
    set -l key; set -l val
    for key in (string match -v -a -r (echo '('(string join '|' $iterm2cs_props)')') $props)
        set val (yq ".$key" $theme_json_file 2>/dev/null)
        if not string match -q -r '^(null|)$' $val
            set header $header "$key: '$val'"
        end
    end

    # Let the user know where we're at
    echo "Generating $theme_name..."

    # peel off and transform the yaml parts
    printf "%s\n" $header >$TPAK_TEMP/$theme_name.0.yml
    yq '.[] | .primary' $ymlfile >$TPAK_TEMP/$theme_name.1.yml
    yq '.[] | .normal' $ymlfile >$TPAK_TEMP/$theme_name.2.yml
    yq '.[] | .bright | with_entries(.key |= "br" + .)' $ymlfile >$TPAK_TEMP/$theme_name.3.yml
    yq '.[] | .cursor | .color = .cursor | del(.cursor) | with_entries(.key |= "cursor_" + .)' $ymlfile >$TPAK_TEMP/$theme_name.4.yml
    yq '.[] | .selection | with_entries(.key |= "selection_" + .)' $ymlfile >$TPAK_TEMP/$theme_name.5.yml

    # avengers, assemble!
    yq eval-all -o=json '. as $item ireduce ({}; . * $item )' $TPAK_TEMP/$theme_name.*.yml >$theme_json_file
end

function git_iterm2cs
    mkdir -p $CACHEDIR
    set -l iterm2dir $CACHEDIR/iTerm2-Color-Schemes
    if test -d $iterm2dir
        git -C $iterm2dir pull --quiet
    else
        git clone --depth 1 --quiet https://github.com/mbadolato/iTerm2-Color-Schemes $iterm2dir 2>/dev/null
    end
end

function to_snake_case -a str
    # 'Abc DefGhi-(Dark)' -> 'abc_def_ghi_dark'
    string replace -ra 'HaX0R_.+' '\L$0' $str |
    string replace -ra '([a-z0-9])([A-Z])' '$1_$2'|
    string replace -ra '[\s\-\(\)\.]+' '_' |
    string replace -ra '__+' '_' |
    string replace -ra '^_' '' |
    string replace -ra '_$' '' |
    string lower
end

function determine_theme_type --argument-names color
    # https://github.com/mbadolato/iTerm2-Color-Schemes/blob/a914b8aaada2e66b28647d82f937cb807b5dab6f/tools/converter.py#L94-L99\
    set color (string upper $color | string replace '#' '')
    set -l hexcolor \
        (string sub -s 1 -l 2 $color) \
        (string sub -s 3 -l 2 $color) \
        (string sub -s 5 -l 2 $color)

    set r (echo "ibase=16; $hexcolor[1]" | bc)
    set g (echo "ibase=16; $hexcolor[2]" | bc)
    set b (echo "ibase=16; $hexcolor[3]" | bc)

    if test (math 0.2126 x $r + 0.7152 x $g + 0.0722 x $b) -lt 40
        echo "dark"
    else
        echo "light"
    end
end

function tpak_main
    switch $argv[1]
        case generate-color-schemes
            gen_all_color_schemes $argv[2..]
        case foo
            gen_all_color_schemes $argv[2..]
        case *
            echo >&2 "Unrecognized command '$argv[1]'" && return 1
    end
end
tpak_main $argv

# clean up
test -d $TPAK_TEMP && rm -rf $TPAK_TEMP
