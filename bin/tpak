#!/usr/bin/env fish

# tpak - tool for generating color palette json files

set -g PRJDIR (path dirname (path resolve (status dirname)))
set -g TPAK_TEMP (mktemp -d -t tpak)

function build_metadata_file
    set -q XDG_CACHE_HOME || set -l XDG_CACHE_HOME $HOME/.cache
    set -l cachedir $XDG_CACHE_HOME/themepack.fish

    # pre-reqs
    if not type yq &>/dev/null
        echo >&2 "tpak: Required tool not found 'yq'."
        return 1
    end

    # get iterm2 color scheme repo (it has a bunch of themes in alacritty yaml format)
    set -l repo mbadolato/iTerm2-Color-Schemes
    set -l repodir $cachedir/iterm2cs
    if test -d $repodir
        git -C $repodir pull --quiet
    else
        git clone --depth 1 --quiet https://github.com/$repo $repodir 2>/dev/null
    end

    set -l workdir $TPAK_TEMP/itermcs_metadata
    mkdir -p $workdir
    set -l file
    for ymlfile in $cachedir/iterm2cs/alacritty/*.yml
        set -l filename (path basename $ymlfile)
        set -l jsonfile $workdir/(path change-extension 'json' $filename)
        set -l fullname (path change-extension '' $filename)
        set -l bg (yq '.[] | .primary | .background' $ymlfile)
        set -l theme_type (determine_theme_type $bg)
        set -l repo_path "alacritty/$filename"
        set -l name (
            # snake case name
            string replace -ra 'HaX0R_.+' '\L$0' $fullname |
            string replace -ra '([a-z0-9])([A-Z])' '$1_$2' |
            string replace -ra '[\s\-\(\)\.]+' _ |
            string replace -ra '__+' _ |
            string replace -ra '^_' '' |
            string replace -ra '_$' '' |
            string lower
        )
        set -l json '{ "themes": [{' \
            '"name": "'$name'",' \
            '"fullname": "'$fullname'",' \
            '"type": "'$theme_type'",' \
            '"repo": "'$repo'",' \
            '"path": "'$repo_path'",' \
            '"outfile": "'$outfile'",' \
            '"format": "alacritty"' \
        "}]}"
        echo "Generating $name metadata..."
        echo $json >$jsonfile
    end

    set -l themepack_yml $PRJDIR/themes/themepack.yml
    if test -f $themepack_yml
        yq -o=json 'del(.themes[] | select(.repo == "mbadolato/iTerm2-Color-Schemes"))' $themepack_yml >$workdir/_themepack.json
    end

    # Avengers, assemble!
    echo "Assembling metadata..."
    yq eval-all -P '. as $item ireduce ({}; . *+ $item ) | .themes |= sort_by(.name)' $workdir/*.json >$PRJDIR/themes/themepack.yml
    echo "Done."
end

function determine_theme_type --argument-names color
    # https://github.com/mbadolato/iTerm2-Color-Schemes/blob/a914b8aaada2e66b28647d82f937cb807b5dab6f/tools/converter.py#L94-L99\
    set color (string upper $color | string replace '#' '')
    set -l hexcolor \
        (string sub -s 1 -l 2 $color) \
        (string sub -s 3 -l 2 $color) \
        (string sub -s 5 -l 2 $color)

    set r (echo "ibase=16; $hexcolor[1]" | bc)
    set g (echo "ibase=16; $hexcolor[2]" | bc)
    set b (echo "ibase=16; $hexcolor[3]" | bc)

    if test (math 0.2126 x $r + 0.7152 x $g + 0.0722 x $b) -lt 40
        echo dark
    else
        echo light
    end
end

function tpak_main
    switch $argv[1]
        case '' help
            echo "tpak - themepack.fish project build utility"
            echo ""
            echo "Commands:"
            echo "  help               Show this message"
            echo "  build              Build project files"
            return
        case build
            build_metadata_file $argv[2..]
        case *
            echo >&2 "Unrecognized command '$argv[1]'" && return 1
    end
end
tpak_main $argv

# clean up
test -d $TPAK_TEMP && rm -rf $TPAK_TEMP
